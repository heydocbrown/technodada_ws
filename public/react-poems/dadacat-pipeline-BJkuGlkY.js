var W=Object.defineProperty;var X=(p,e,a)=>e in p?W(p,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):p[e]=a;var V=(p,e,a)=>X(p,typeof e!="symbol"?e+"":e,a);import{f as N}from"./react-vendor-BxNt2Mgw.js";class Y{constructor(e){this.functionUrl=e,this.timeout=3e4}async generateResponse(e){if(!this.functionUrl)throw new Error("dadacat-agent-x86 function URL not configured");console.log(`Calling dadacat-agent-x86 with prompt: ${e.substring(0,50)}...`);const a={prompt:e};try{const o=new AbortController,t=setTimeout(()=>o.abort(),this.timeout),n=await N(this.functionUrl,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(a),signal:o.signal});if(clearTimeout(t),!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const s=await n.json();return console.log(`dadacat-agent-x86 response: ${s.status}`),s}catch(o){return o.name==="AbortError"?(console.error("dadacat-agent-x86 request timed out"),{status:"error",error:"Request timed out"}):(console.error(`dadacat-agent-x86 request failed: ${o.message}`),{status:"error",error:o.message})}}async testConnection(){try{return(await this.generateResponse("test")).status==="success"}catch(e){return console.error(`Connection test failed: ${e.message}`),!1}}}class Z{constructor(e){this.baseUrl=e,this.timeout=3e4}async generateImage(e){var o;if(!this.baseUrl)throw new Error("ImageGenerationProcessor base URL not configured");const a=`${this.baseUrl}/generate`;console.log("Calling ImageGenerationProcessor generate endpoint"),console.debug("Request data:",e);try{const t=new AbortController,n=setTimeout(()=>t.abort(),this.timeout),s=await N(a,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e),signal:t.signal});if(clearTimeout(n),!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const r=await s.json(),i=(o=r.data)==null?void 0:o.job_id;return console.log(`Image generation queued: job_id=${i}`),r}catch(t){return t.name==="AbortError"?(console.error("ImageGenerationProcessor request timed out"),{success:!1,error:"Request timed out"}):(console.error(`ImageGenerationProcessor request failed: ${t.message}`),{success:!1,error:t.message})}}async checkStatus(e){var o;if(!this.baseUrl)throw new Error("ImageGenerationProcessor base URL not configured");const a=`${this.baseUrl}/status/${e}`;console.debug(`Checking status for job_id: ${e}`);try{const t=new AbortController,n=setTimeout(()=>t.abort(),this.timeout),s=await N(a,{method:"GET",headers:{Accept:"application/json"},signal:t.signal});if(clearTimeout(n),!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const r=await s.json(),i=((o=r.data)==null?void 0:o.status)||"unknown";return console.debug(`Job ${e} status: ${i}`),r}catch(t){return t.name==="AbortError"?(console.error(`Status check timed out for job ${e}`),{success:!1,error:"Status check timed out"}):(console.error(`Status check failed for job ${e}: ${t.message}`),{success:!1,error:t.message})}}async pollForCompletion(e,a=300,o=5){var r;console.log(`Polling for completion of job ${e} (max wait: ${a}s)`);const t=Date.now(),n=a*1e3,s=o*1e3;for(;Date.now()-t<n;){const i=await this.checkStatus(e);if(!i.success)return console.error(`Status check failed: ${JSON.stringify(i)}`),i;const l=((r=i.data)==null?void 0:r.status)||"unknown";if(l==="completed")return console.log(`Job ${e} completed successfully`),i;if(l==="failed")return console.error(`Job ${e} failed`),i;["queued","processing"].includes(l)?(console.log(`Job ${e} still ${l}, waiting ${o}s...`),await this._sleep(s)):(console.warn(`Job ${e} has unknown status: ${l}`),await this._sleep(s))}return console.error(`Job ${e} polling timed out after ${a}s`),{success:!1,error:`Polling timed out after ${a}s`}}async testConnection(){try{const e={prompt:"test image for client validation",options:{model:"dall-e-3",size:"1024x1024"}};return(await this.generateImage(e)).success||!1}catch(e){return console.error(`Connection test failed: ${e.message}`),!1}}_sleep(e){return new Promise(a=>setTimeout(a,e))}}class ee{constructor(e){this.functionUrl=e,this.timeout=6e4}async uploadImage(e){var o;if(!this.functionUrl)throw new Error("ImageB2Uploader function URL not configured");console.log("Calling ImageB2Uploader"),console.debug("Request data:",e);const a=["job_id","run_id","image_url"];for(const t of a)if(!(t in e))throw new Error(`Missing required field: ${t}`);try{const t=new AbortController,n=setTimeout(()=>t.abort(),this.timeout),s=await N(this.functionUrl,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e),signal:t.signal});if(clearTimeout(n),!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const r=await s.json();if(r.success){const i=(o=r.data)==null?void 0:o.b2_url;console.log(`Image uploaded successfully: ${i}`)}else console.error(`Upload failed: ${JSON.stringify(r)}`);return r}catch(t){return t.name==="AbortError"?(console.error("ImageB2Uploader request timed out"),{success:!1,error:"Request timed out"}):(console.error(`ImageB2Uploader request failed: ${t.message}`),{success:!1,error:t.message})}}async testConnection(){try{return await this.uploadImage({test:"connection"}),!1}catch(e){const o=(e.message||"").includes("Missing required field");return o?console.log("✅ ImageB2Uploader connection test passed (validation error expected)"):console.error(`Connection test failed: ${e.message}`),o}}}class H{static validateOptions(e={},a="dall-e-3"){const o={validatedOptions:{},errors:[],warnings:[]};if(!this.OPTIONS.model.options[a])return o.errors.push(`Invalid model: ${a}. Valid models: ${Object.keys(this.OPTIONS.model.options).join(", ")}`),o;o.validatedOptions=this.getDefaultOptions(a);for(const[t,n]of Object.entries(e)){const s=this.OPTIONS[t];if(!s){o.warnings.push(`Unknown option: ${t}`);continue}const r=s.options[a];if(r===null){o.warnings.push(`Option '${t}' is not supported by model '${a}'`);continue}const i=this._validateOptionValue(t,n,r,a);i?o.errors.push(i):o.validatedOptions[t]=n}return o}static getDefaultOptions(e="dall-e-3"){const a={};for(const[o,t]of Object.entries(this.OPTIONS))o!=="model"&&t.options[e]!==null&&(typeof t.default=="object"&&t.default[e]!==void 0?a[o]=t.default[e]:typeof t.default!="object"&&(a[o]=t.default));return a.model=e,a}static getSupportedOptions(e="dall-e-3"){const a={};for(const[o,t]of Object.entries(this.OPTIONS))t.options[e]!==null&&(a[o]={name:t.name,description:t.description,options:t.options[e],default:typeof t.default=="object"?t.default[e]:t.default});return a}static _validateOptionValue(e,a,o,t){switch(e){case"size":const n=o.map(s=>s.value);if(!n.includes(a))return`Invalid size '${a}' for model '${t}'. Valid sizes: ${n.join(", ")}`;break;case"n":if(!o.includes(a))return`Invalid number of images '${a}' for model '${t}'. Valid values: ${o.join(", ")}`;break;case"quality":case"style":case"background":case"moderation":case"output_format":case"response_format":if(typeof o=="object"&&!o[a])return`Invalid ${e} '${a}' for model '${t}'. Valid values: ${Object.keys(o).join(", ")}`;break;case"output_compression":if(o.values&&!o.values.includes(a))return`Invalid output_compression '${a}' for model '${t}'. Valid range: 1-100`;break}return null}static cleanOptionsForModel(e={},a="dall-e-3"){const o={};for(const[t,n]of Object.entries(e)){const s=this.OPTIONS[t];s&&s.options[a]!==null&&(o[t]=n)}return o}}V(H,"OPTIONS",{model:{name:"Model",description:"The model to use for image generation",options:{"gpt-image-1":"GPT Image 1","dall-e-3":"DALL-E 3","dall-e-2":"DALL-E 2"},default:"dall-e-3"},size:{name:"Image Size",description:"The size of the generated images",options:{"dall-e-2":[{value:"256x256",display:"Small (256x256)"},{value:"512x512",display:"Medium (512x512)"},{value:"1024x1024",display:"Large (1024x1024)"}],"dall-e-3":[{value:"1024x1024",display:"Square (1024x1024)"},{value:"1792x1024",display:"Landscape (1792x1024)"},{value:"1024x1792",display:"Portrait (1024x1792)"}],"gpt-image-1":[{value:"1024x1024",display:"Square (1024x1024)"},{value:"1536x1024",display:"Landscape (1536x1024)"},{value:"1024x1536",display:"Portrait (1024x1536)"}]},default:{"dall-e-2":"1024x1024","dall-e-3":"1024x1024","gpt-image-1":"1024x1024"}},n:{name:"Number of Images",description:"The number of images to generate",options:{"dall-e-2":Array.from({length:10},(e,a)=>a+1),"dall-e-3":[1],"gpt-image-1":Array.from({length:10},(e,a)=>a+1)},default:1},quality:{name:"Image Quality",description:"The quality of the image that will be generated",options:{"dall-e-2":{standard:"Standard"},"dall-e-3":{standard:"Standard",hd:"HD"},"gpt-image-1":{auto:"Auto",high:"High",medium:"Medium",low:"Low"}},default:{"dall-e-2":"standard","dall-e-3":"standard","gpt-image-1":"auto"}},style:{name:"Image Style",description:"The style of the generated images (DALL-E 3 only)",options:{"dall-e-2":null,"dall-e-3":{vivid:"Vivid (hyper-real and dramatic)",natural:"Natural (more natural looking)"},"gpt-image-1":null},default:{"dall-e-3":"vivid"}},background:{name:"Background",description:"Sets transparency for the background (GPT Image 1 only)",options:{"dall-e-2":null,"dall-e-3":null,"gpt-image-1":{auto:"Auto (model decides)",transparent:"Transparent",opaque:"Opaque"}},default:{"gpt-image-1":"auto"}},moderation:{name:"Content Moderation",description:"Content moderation level for images (GPT Image 1 only)",options:{"dall-e-2":null,"dall-e-3":null,"gpt-image-1":{auto:"Auto (standard filtering)",low:"Low (less restrictive filtering)"}},default:{"gpt-image-1":"auto"}},output_format:{name:"Output Format",description:"Format of generated images (GPT Image 1 only)",options:{"dall-e-2":null,"dall-e-3":null,"gpt-image-1":{png:"PNG",jpeg:"JPEG",webp:"WebP"}},default:{"gpt-image-1":"png"}},output_compression:{name:"Output Compression",description:"Compression level for WebP/JPEG (GPT Image 1 only)",options:{"dall-e-2":null,"dall-e-3":null,"gpt-image-1":{values:Array.from({length:100},(e,a)=>a+1),applicable_formats:["webp","jpeg"]}},default:{"gpt-image-1":100}},response_format:{name:"Response Format",description:"Format in which images are returned (DALL-E models only)",options:{"dall-e-2":{url:"URL",b64_json:"Base64 JSON"},"dall-e-3":{url:"URL",b64_json:"Base64 JSON"},"gpt-image-1":null},default:{"dall-e-2":"url","dall-e-3":"url"}}});class te{constructor(e){this.config={maxRetries:3,retryDelay:5,timeout:300,pollingInterval:5,...e},this.dadacatClient=new Y(this.config.dadacatUrl),this.imageGenClient=new Z(this.config.imageGenUrl),this.b2UploadClient=new ee(this.config.b2UploadUrl)}async runSequentialPipeline(e){var s,r,i,l,P,g;const a=`sequential_${Date.now()}`,o=Date.now();console.log(`Starting sequential pipeline ${a} with prompt: ${e}`);const t=[];let n=null;try{const m=Date.now();console.log("Step 1: Calling dadacat-agent-x86");const d=await this.dadacatClient.generateResponse(e),f=(Date.now()-m)/1e3;if(t.push({step:1,lambda:"dadacat-agent-x86",input:{prompt:e},output:d,duration:f,success:d.status==="success"}),d.status!=="success")throw new Error(`Step 1 failed: ${JSON.stringify(d)}`);const c=d.response||"";console.log(`Step 1 completed in ${f.toFixed(2)}s: ${c.substring(0,100)}...`);const w=Date.now();console.log("Step 2: Calling ImageGenerationProcessor");const I={prompt:c,options:{model:"dall-e-3",size:"1024x1024",quality:"standard"}},_=await this.imageGenClient.generateImage(I);if(!_.success)throw new Error(`Step 2 failed to queue: ${JSON.stringify(_)}`);const $=(s=_.data)==null?void 0:s.job_id,h=(r=_.data)==null?void 0:r.run_id;console.log(`Step 2 queued: job_id=${$}, run_id=${h}`),console.log("Polling for image generation completion...");const u=await this.imageGenClient.pollForCompletion($,this.config.timeout,this.config.pollingInterval),O=(Date.now()-w)/1e3;if(t.push({step:2,lambda:"ImageGenerationProcessor",input:I,output:u,duration:O,success:u.success&&((i=u.data)==null?void 0:i.status)==="completed"}),!u.success||((l=u.data)==null?void 0:l.status)!=="completed")throw new Error(`Step 2 failed: ${JSON.stringify(u)}`);const b=(P=u.data)==null?void 0:P.url;console.log(`Step 2 completed in ${O.toFixed(2)}s: ${b}`);const C=Date.now();console.log("Step 3: Calling ImageB2Uploader");const D={job_id:$,run_id:h,image_url:b,metadata:{original_prompt:e,agent_response:c,generation_timestamp:new Date().toISOString()}},U=await this.b2UploadClient.uploadImage(D),S=(Date.now()-C)/1e3;if(t.push({step:3,lambda:"ImageB2Uploader",input:D,output:U,duration:S,success:U.success}),!U.success)throw new Error(`Step 3 failed: ${JSON.stringify(U)}`);const y=(g=U.data)==null?void 0:g.b2_url;console.log(`Step 3 completed in ${S.toFixed(2)}s: ${y}`);const x=(Date.now()-o)/1e3;return{success:!0,testId:a,timestamp:new Date(o).toISOString(),inputData:{prompt:e},steps:t,finalResult:{agentResponse:c,imageUrl:b,b2Url:y,jobId:$,runId:h},totalDuration:x}}catch(m){n=m.message,console.error(`Pipeline failed: ${n}`);const d=(Date.now()-o)/1e3;return{success:!1,testId:a,timestamp:new Date(o).toISOString(),inputData:{prompt:e},steps:t,error:n,totalDuration:d}}}async runMetadataPipeline(e){var s,r,i,l,P;const a=`metadata_${Date.now()}`,o=Date.now();console.log(`Starting metadata pipeline ${a}`),console.log("Input data:",JSON.stringify(e,null,2));const t=[];let n=null;try{const{original_prompt:g,batch_id:m,user_context:d}=e,f=Date.now();console.log("Step 1: Calling dadacat-agent-x86 with metadata");const c=await this.dadacatClient.generateResponse(g),w=(Date.now()-f)/1e3;if(c.status!=="success")throw new Error(`Step 1 failed: ${JSON.stringify(c)}`);const I=c.response||"",_=Date.now();console.log("Step 2: Calling ImageGenerationProcessor with metadata");const $={prompt:I,batch_id:m,options:{model:"dall-e-3",size:"1024x1024",quality:"standard"}},h=await this.imageGenClient.generateImage($);if(!h.success)throw new Error(`Step 2 failed to queue: ${JSON.stringify(h)}`);const u=(s=h.data)==null?void 0:s.job_id,O=(r=h.data)==null?void 0:r.run_id,b=await this.imageGenClient.pollForCompletion(u,this.config.timeout,this.config.pollingInterval),C=(Date.now()-_)/1e3;if(!b.success||((i=b.data)==null?void 0:i.status)!=="completed")throw new Error(`Step 2 failed: ${JSON.stringify(b)}`);const D=(l=b.data)==null?void 0:l.url,U=Date.now();console.log("Step 3: Calling ImageB2Uploader with metadata");const S={job_id:u,run_id:O,image_url:D,metadata:{original_prompt:g,agent_response:I,batch_id:m,user_context:d,generation_timestamp:new Date().toISOString()}},y=await this.b2UploadClient.uploadImage(S),x=(Date.now()-U)/1e3;if(!y.success)throw new Error(`Step 3 failed: ${JSON.stringify(y)}`);const k=(P=y.data)==null?void 0:P.b2_url,q=(Date.now()-o)/1e3;return t.push({step:1,lambda:"dadacat-agent-x86",input:{prompt:g},output:c,duration:w,success:!0},{step:2,lambda:"ImageGenerationProcessor",input:$,output:b,duration:C,success:!0},{step:3,lambda:"ImageB2Uploader",input:S,output:y,duration:x,success:!0}),{success:!0,testId:a,timestamp:new Date(o).toISOString(),inputData:e,steps:t,finalResult:{agentResponse:I,imageUrl:D,b2Url:k,jobId:u,runId:O,metadata:{batch_id:m,user_context:d,original_prompt:g}},totalDuration:q}}catch(g){n=g.message,console.error(`Metadata pipeline failed: ${n}`);const m=(Date.now()-o)/1e3;return{success:!1,testId:a,timestamp:new Date(o).toISOString(),inputData:e,steps:t,error:n,totalDuration:m}}}async runConfigurablePipeline(e){var s,r,i,l,P,g,m,d;const a=`configurable_${Date.now()}`,o=Date.now();console.log(`Starting configurable pipeline ${a}`),console.log("Input data:",JSON.stringify(e,null,2));const t=[];let n=null;try{const{human_prompt:f,batch_id:c,additional_prompt:w,options:I={},bucket:_,folder:$,artproject:h,on_website:u="yes",custom_metadata:O={}}=e;if(!f)throw new Error("human_prompt is required");const b=I.model||"dall-e-3",C=H.validateOptions(I,b);if(C.errors.length>0)throw new Error(`Invalid options: ${C.errors.join(", ")}`);C.warnings.length>0&&console.warn("Option warnings:",C.warnings.join(", "));const D=C.validatedOptions,U=Date.now();console.log("Step 1: Calling dadacat-agent-x86");const S=await this.dadacatClient.generateResponse(f),y=(Date.now()-U)/1e3;if(t.push({step:1,lambda:"dadacat-agent-x86",input:{prompt:f},output:S,duration:y,success:S.status==="success"}),S.status!=="success")throw new Error(`Step 1 failed: ${JSON.stringify(S)}`);const x=S.response||"";console.log(`Step 1 completed in ${y.toFixed(2)}s`);const k=Date.now();console.log("Step 2: Calling ImageGenerationProcessor");const q={prompt:x,...w&&{additional_prompt:w},...c&&{batch_id:c},options:D},R=await this.imageGenClient.generateImage(q);if(!R.success)throw new Error(`Step 2 failed to queue: ${JSON.stringify(R)}`);const E=(s=R.data)==null?void 0:s.job_id,J=(r=R.data)==null?void 0:r.run_id,G=(i=R.data)==null?void 0:i.batch_id;console.log(`Step 2 queued: job_id=${E}, run_id=${J}, batch_id=${G}`),console.log("Polling for image generation completion...");const T=await this.imageGenClient.pollForCompletion(E,this.config.timeout,this.config.pollingInterval),B=(Date.now()-k)/1e3;if(t.push({step:2,lambda:"ImageGenerationProcessor",input:q,output:T,duration:B,success:T.success&&((l=T.data)==null?void 0:l.status)==="completed"}),!T.success||((P=T.data)==null?void 0:P.status)!=="completed")throw new Error(`Step 2 failed: ${JSON.stringify(T)}`);const A=(g=T.data)==null?void 0:g.url,F=(m=T.data)==null?void 0:m.timestamp;console.log(`Step 2 completed in ${B.toFixed(2)}s: ${A}`);const Q=Date.now();console.log("Step 3: Calling ImageB2Uploader");const j={job_id:E,run_id:J,image_url:A,...G&&{batch_id:G},prompt:w?`${w} ${x}`:x,...w&&{additional_prompt:w},human_prompt:f,options:D,...h&&{artproject:h},...F&&{timestamp:F},..._&&{bucket:_},...$&&{folder:$},...u&&{on_website:u}};Object.keys(O).forEach(L=>{j.hasOwnProperty(L)||(j[L]=O[L])});const v=await this.b2UploadClient.uploadImage(j),M=(Date.now()-Q)/1e3;if(t.push({step:3,lambda:"ImageB2Uploader",input:j,output:v,duration:M,success:v.success}),!v.success)throw new Error(`Step 3 failed: ${JSON.stringify(v)}`);const z=(d=v.data)==null?void 0:d.b2_url;console.log(`Step 3 completed in ${M.toFixed(2)}s: ${z}`);const K=(Date.now()-o)/1e3;return{success:!0,testId:a,timestamp:new Date(o).toISOString(),inputData:e,steps:t,finalResult:{agentResponse:x,imageUrl:A,b2Url:z,jobId:E,runId:J,metadataFlow:{human_prompt:f,dadacat_response:x,combined_prompt:j.prompt,batch_id:G,additional_prompt:w,options:D,artproject:h,custom_metadata:O}},totalDuration:K}}catch(f){n=f.message,console.error(`Configurable pipeline failed: ${n}`);const c=(Date.now()-o)/1e3;return{success:!1,testId:a,timestamp:new Date(o).toISOString(),inputData:e,steps:t,error:n,totalDuration:c}}}async testConnections(){console.log("Testing connections to all lambda functions...");const e={};try{e.dadacat=await this.dadacatClient.testConnection(),console.log(`dadacat-agent-x86: ${e.dadacat?"✅":"❌"}`)}catch(o){e.dadacat=!1,console.error(`dadacat-agent-x86 test failed: ${o.message}`)}try{e.imageGen=await this.imageGenClient.testConnection(),console.log(`ImageGenerationProcessor: ${e.imageGen?"✅":"❌"}`)}catch(o){e.imageGen=!1,console.error(`ImageGenerationProcessor test failed: ${o.message}`)}try{e.b2Upload=await this.b2UploadClient.testConnection(),console.log(`ImageB2Uploader: ${e.b2Upload?"✅":"❌"}`)}catch(o){e.b2Upload=!1,console.error(`ImageB2Uploader test failed: ${o.message}`)}return{success:Object.values(e).every(Boolean),results:e,summary:`${Object.values(e).filter(Boolean).length}/3 connections successful`}}}const oe={dadacatUrl:"https://36p5iskcyhwes5rcipwloye4xm0jmqkv.lambda-url.us-east-2.on.aws/",imageGenUrl:"https://dtren15fk6.execute-api.us-east-2.amazonaws.com/prod",b2UploadUrl:"https://drpsasxo6ni2epcdu24zrp4n4e0nhdoy.lambda-url.us-east-2.on.aws/"},ae={maxRetries:3,retryDelay:5,timeout:300,pollingInterval:5};function re(p={}){const e={...oe,...ae,...p};return new te(e)}export{re as c};
